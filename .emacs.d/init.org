# Copyright (C) 2023  CToID

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#+TITLE: ID's GNU Emacs Configuration File
#+AUTHOR: CToID
#+OPTIONS: num:nil toc:nil

*This configuration needs Emacs 29 or later*

My Emacs is configured with ~--with-pgtk --with-native-compilation=yes --with-tree-sitter --with-json --with-imagemagick CFLAGS=-O2~.

* Table of Contents :TOC_1:noexport:
- [[#license][License]]
- [[#configure-package-archives][Configure Package Archives]]
- [[#configure-use-package][Configure use-package]]
- [[#appearance][Appearance]]
- [[#evil-mode-and-friends][EVIL Mode and Friends]]
- [[#org-mode-and-friends][Org Mode and Friends]]
- [[#major-modes][Major Modes]]
- [[#misc][Misc]]
- [[#custom-defined-functions][Custom-defined Functions]]
- [[#hooks][Hooks]]

* License
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
The config file is released under GPL.  This Org File is released under GPL as
well, check this file's source code to see the license notice.
#+begin_src elisp
;;;; Copyright (C) 2023  CToID

;;;; This program is free software: you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation, either version 3 of the License, or
;;;; (at your option) any later version.

;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
#+end_src

* Configure Package Archives
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
Add package archives to the list.
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
             '("gnu" . "https://elpa.gnu.org/packages/"))
#+end_src

* Configure use-package
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
~use-package~ is an Emacs package that provides macros to help configuring
packages in Emacs.

This first part here is for compatability reason.  ~use-package~ is shipped with
Emacs by default after Emacs 29.
#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

Then we'll load ~use-package~.
#+begin_src elisp
(eval-when-compile
  (require 'use-package))
#+end_src

* Appearance
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
A very minimal theme.  See [[http://www.linusakesson.net/programming/syntaxhighlighting/index.php][A case against syntax highlighting]].
#+begin_src elisp
(use-package plain-theme
  :ensure t
  :config
  (load-theme 'plain t))
#+end_src

I have customised my splash screen using package ~dashboard~.  ~dashboard~ came
with many items on display by default, and I don't like them, so I just set them
to ~nil~.  The last part is to start ~dashboard~ properly if using an Emacs
server.
#+begin_src elisp
(use-package dashboard
  :ensure t
  :custom
  (dashboard-banner-logo-title "GNU EMACS - Editor MACroS")
  (dashboard-startup-banner "~/.emacs.d/emacs.png")
  (dashboard-center-content t)
  (dashboard-week-agenda nil)
  (dashboard-agenda-time-string-format "%m %d %y %H:%M")
  (dashboard-agenda-prefix-format "%?-12t% s")
  (dashboard-agenda-release-buffers t)
  (dashboard-items nil)
  (dashboard-set-init-info nil)
  :config
  (add-to-list 'dashboard-footer-messages "Free as in Freedom!")
  (add-to-list 'dashboard-footer-messages
               "There is no system but GNU, and Linux is one of its kernels."))
(if (and (< (length command-line-args) 4)
         (member "server-start" command-line-args))
    (let ((command-line-args '("emacs")))
      (dashboard-setup-startup-hook))
  (dashboard-setup-startup-hook))
#+end_src

* EVIL Mode and Friends
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
I used to use vim keybindings in Emacs, but later I found that I wanted to use
vanilla Emacs keybindings.  So the code in this section will all be commented
out.

To have keybindings that have a leader key, I use the package ~general~.
#+begin_src elisp
;; (use-package general
;;   :ensure t
;;   :config (general-eval-setup t))
#+end_src

Then I use ~evil-mode~ to emulate VIM keys.  I configured some variables before
loading it up for better integration with Emacs.
#+begin_src elisp
;; (use-package evil
;;   :ensure t
;;   :init
;;   (setq evil-want-C-u-scroll t
;;         evil-want-integration t
;;         evil-want-keybinding nil
;;         evil-want-minibuffer t)
;;   :config (evil-mode 1))
#+end_src

To have more complete VIM keys in other modes, I have ~evil-collection~ package.
#+begin_src elisp
;; (use-package evil-collection
;;   :after evil
;;   :ensure t
;;   :config (evil-collection-init))
#+end_src

In order for undo/redo to work under ~evil-mode~, ~undo-tree~ is needed.
#+begin_src elisp
;; (use-package undo-tree
;;   :after evil
;;   :ensure t
;;   :init
;;   (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo_tree")))
;;   :config
;;   (evil-set-undo-system 'undo-tree)
;;   (global-undo-tree-mode 1))
#+end_src

* Org Mode and Friends
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
For easier creation of table of contents in Org Mode, I have ~toc-org~.
#+begin_src elisp
(use-package toc-org
  :commands (toc-org-enable)
  :ensure t
  :hook (org-mode . toc-org-enable))
#+end_src

To export the code blocks in Org to HTML with fontification stuffs, I use
~htmlize~.  This can also be used in normal code files.
#+begin_src elisp
(use-package htmlize
  :ensure t)
#+end_src

* Major Modes
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
Emacs, by default, doesn't come with many major modes for different programming
languages, so I have to install them by myself when needed.

Explainations for these modes seem trivial, so I just put them together in one
code block.
#+begin_src elisp
(use-package arduino-mode
  :ensure t)

(use-package yaml-mode
  :ensure t)

(use-package racket-mode
  :ensure t)

(use-package markdown-mode
  :ensure t)

(use-package racket-mode
  :ensure t)
#+end_src

I mostly do Common Lisp development, so I have installed ~sly~ to enhance my
development experience.  I did use ~slime~ before, and I will leave it commented
here.
#+begin_src elisp
(use-package sly
  :ensure t
  :init (setq inferior-lisp-program "sbcl")
  :config
  (setq common-lisp-hyperspec-root
        (concat "file:///"
                (expand-file-name (concat user-emacs-directory "HyperSpec/"))))
  :custom
  (sly-common-lisp-style-default "modern"))

;; (use-package slime
;;   :ensure t
;;   :init (setq inferior-lisp-program "sbcl"))
#+end_src

I am now trying out Clojure, so I have ~cider~.  Basically ~sly~ but for
clojure.
#+begin_src elisp
(use-package cider
  :ensure t
  :custom
  (cider-font-lock-dynamically nil)
  (cider-allow-jack-in-without-project t))
#+end_src

* Misc
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
Emacs has a very powerful git client, ~magit~.
#+begin_src elisp
(use-package magit
  :ensure t
  :commands (magit magit-clone))
#+end_src

To copy/paste text from GUI clipboard while running Emacs in a text terminal, we
need ~xclip~.
#+begin_src elisp
(use-package xclip
  :ensure t)
#+end_src

The built-in shells/terminals that comes with Emacs is good, but not good
enough.  So I have ~eat~ to provide a decent terminal emulator in Emacs, and
it really does a great job.  It can also be integrated with Eshell.  The reason
why ~eshell-visual-commands~ is set to ~nil~ is that Eat is already been
integrated into Eshell, so no need to open a new terminal window for those
visual commands.
#+begin_src elisp
(use-package eat
  :ensure t
  :config
  (eat-eshell-mode)
  (eat-eshell-visual-command-mode)
  :custom
  (eshell-visual-commands nil))
#+end_src

Sometimes I'll need some hints while typing keystrokes, this is the time when
~which-key~ comes in handy.
#+begin_src elisp
(use-package which-key
  :ensure t
  :custom
  (which-key-side-window-location 'bottom)
  (which-key-sort-uppercase-first nil)
  (which-key-add-column-padding 0)
  (which-key-max-display-columns nil)
  (which-key-side-window-max-height 0.25)
  (which-key-idle-delay 0.5)
  (which-key-max-description-length 25)
  :config
  (which-key-mode))
#+end_src

I'd like to have quick access to the files I have recently opened, thus I need
to configure ~recentf~.  It comes with Emacs by default.
#+begin_src elisp
(use-package recentf
  :custom
  (recentf-max-menu-items 10)
  (recentf-max-saved-itmes 10)
  (add-to-list 'recentf-exclude "\\.last\\'")
  :config
  (recentf-mode 1))
#+end_src

Emacs has integrated tree-sitter into it since version 29, but setting up those
libraries are kinda annoying, so I have ~treesit-auto~ to auto set them up when
needed.
#+begin_src elisp
(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (global-treesit-auto-mode))
#+end_src

~unfill~ is a package to undo ~fill-region~ or ~fill-paragraph~.
#+begin_src elisp
(use-package unfill
  :ensure t)
#+end_src

Sometimes I’ll need to have multiple cursors.
#+begin_src elisp
(use-package multiple-cursors
  :ensure t)
#+end_src

* Custom-defined Functions
I have defined several functions to help me setup my Emacs.

** Startup Function
This function will be called after Emacs has started up, so these actions won't
slow Emacs down during starting.
#+begin_src elisp :noweb yes :tangle "init.el"
(defun startup-function ()
  (require 'org)
  <<customize-variable>>
  <<font-and-key>>
  <<org-variable-pitch>>
  <<auto-fill-mode-for-org>>
  <<electric-quote-mode-for-org>>
  <<init-package>>)
#+end_src

We'll then set several variables up.  Most of my custom built-in variables are
set via Emacs' built-in "customize" functionality, and can be found in
[[file:custom-var.el][custom-var.el]], but some variables cannot be set by that for various of reasons,
so they are set here.  Package related variables are set using ~use-package~'s
~:custom~ functionality, as you can see from previous sections.
#+begin_src elisp :noweb-ref customize-variable
(setq default-input-method "chinese-array30"
      completion-ignore-case t
      initial-buffer-choice (lambda () (dashboard-open)))
#+end_src

Setting default coding system.
#+begin_src elisp :noweb-ref coding-system
(set-default-coding-systems 'utf-8)
#+end_src

The following two functions are used to setup fonts and keybindings.
#+begin_src elisp :noweb-ref font-and-key
(set-fonts)
(set-keys)
#+end_src

Use variable-pitch font in Org Mode.
#+begin_src elisp :noweb-ref org-variable-pitch
(add-hook 'org-mode-hook #'variable-pitch-mode)
#+end_src

Turn on ~auto-fill-mode~ for both Org Mode and Org Capture Mode.  The default
~fill-column~ is set to 80.
#+begin_src elisp :noweb-ref auto-fill-mode-for-org
(add-hook 'org-mode-hook #'auto-fill-mode)
(add-hook 'org-capture-mode-hook #'auto-fill-mode)
#+end_src

Turn on ~electric-quote-local-mode~ for Org mode buffers so one can easily
insert “ and ”.  If one needs to insert ` and ', type ~C-q `~ or ~C-q '~.
#+begin_src elisp :noweb-ref electric-quote-mode-for-org
(add-hook 'org-mode-hook #'electric-quote-local-mode)
(add-hook 'org-capture-mode-hook #'electric-quote-local-mode)
#+end_src

Initialize packages, i.e. get their paths into ~load-path~.
#+begin_src elisp :noweb-ref init-package
(package-initialize)
#+end_src

** Setting Fonts and Faces
I have two functions to set fonts, one will be executed after every time when
there's a frame is created, and the other one will only be executed once when
the Emacs daemon started.

This is due to a strange bug I encountered while using Emacs daemon, that is, if
I have a frame in workspace 1, and I created another one in workspace 2, the
minibuffer of the frame in workspace 1 will grow for some reason, and cannot be
shrink back to its normal size.  I found out this is because of setting face
attributes repeatedly, so I decided to put those codes into another function
that only executes once, which will be the ~set-font~ function.
#+begin_src elisp :tangle "init.el" :noweb yes
(defun set-fonts ()
  (let ((font-height 140))
    <<basic-face-attributes>>))
#+end_src

These set the attributes of basic faces.  I am also setting some org faces here
to be fixed-pitch, since I want to use Org Mode in variable-pitch.
#+begin_src elisp :noweb-ref basic-face-attributes
(set-face-attribute 'default nil
                    :family "IBM Plex Mono"
                    :height font-height
                    :weight 'normal)
(set-face-attribute 'variable-pitch nil
                    :family "Noto Sans CJK TC"
                    :inherit 'default)
(set-face-attribute 'fixed-pitch nil
                    :family "IBM Plex Mono"
                    :inherit 'default)
(set-face-attribute 'org-default nil
                    :inherit 'variable-pitch)
(set-face-attribute 'org-block nil
                    :inherit 'fixed-pitch)
(set-face-attribute 'org-verbatim nil
                    :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil
                    :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil
                    :inherit 'fixed-pitch)
(set-face-attribute 'org-drawer nil
                    :inherit 'fixed-pitch)
(set-face-attribute 'org-special-keyword nil
                    :inherit 'fixed-pitch)
(set-face-attribute 'org-property-value nil
                    :inherit 'fixed-pitch)
#+end_src

** Set Keybindings
I have a few custom keybindings, since I now mainly use vanilla Emacs
keybindings.  Package-related keybindings can be found in their own section.
| Keys         | Actions                                          |
|--------------+--------------------------------------------------|
| C-wheel-up   | Enlarge text size                                |
| C-wheel-down | Reduce text size                                 |
| C-x C-r      | Open a buffer displaying recently modified files |
| C-M-=        | Count words                                      |
#+begin_src elisp :tangle "init.el"
(defun set-keys ()
  (dolist (keybinding '(("<C-wheel-up>" . text-scale-increase)
                        ("<C-wheel-down>" . text-scale-decrease)
                        ("C-x C-r" . recentf-open-files)
                        ("C-M-=" . count-words)))
    (global-set-key (kbd (car keybinding)) (cdr keybinding))))
#+end_src

* Hooks
:PROPERTIES:
:header-args: :tangle "init.el"
:END:
Setup some stuffs after Emacs starts up.  The function has already explained
above.
#+begin_src elisp
(add-hook 'emacs-startup-hook #'startup-function)
#+end_src
